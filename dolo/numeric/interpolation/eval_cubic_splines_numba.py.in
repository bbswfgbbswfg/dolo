
from __future__ import division

from numba import double, int64

from numba import jit, njit

import numpy as np
from numpy import zeros, array

from math import floor
from numpy import empty


Ad = array([
#      t^3       t^2        t        1
   [-1.0/6.0,  3.0/6.0, -3.0/6.0, 1.0/6.0],
   [ 3.0/6.0, -6.0/6.0,  0.0/6.0, 4.0/6.0],
   [-3.0/6.0,  3.0/6.0,  3.0/6.0, 1.0/6.0],
   [ 1.0/6.0,  0.0/6.0,  0.0/6.0, 0.0/6.0]
])

dAd = zeros((4,4))
for i in range(1,4):
    dAd[:,i] = Ad[:,i-1]*(4-i)


d2Ad = zeros((4,4))
for i in range(1,4):
    d2Ad[:,i] = dAd[:,i-1]*(4-i)



{{for d in range(1,max_order+1)}}
@njit
def vec_eval_cubic_multi_spline_{{d}}(a, b, orders, mcoefs, points, values):

    N = points.shape[0]

    for n in range(N):
        point = points[n, :]
        val = values[n, :]
        eval_cubic_multi_spline_{{d}}(a, b, orders, mcoefs, point, val, Ad, dAd)


{{endfor}}


{{for d in range(1,max_order+1)}}
@njit
def eval_cubic_multi_spline_{{d}}(smin, smax, orders, coefs, point, vals, Ad, dAd):

    n_vals = vals.shape[0]

    {{for i in range(d)}}
    M{{i}} = orders[{{i}}]
    start{{i}} = smin[{{i}}]
    dinv{{i}} = (orders[{{i}}]-1.0)/(smax[{{i}}]-smin[{{i}}])
    {{endfor}}

    {{for i in range(d)}}
    x{{i}} = point[{{i}}]
    {{endfor}}

    {{for i in range(d)}}
    u{{i}} = (x{{i}} - start{{i}})*dinv{{i}}
    i{{i}} = int( floor( u{{i}} ) )
    i{{i}} = max( min(i{{i}},M{{i}}-2), 0 )
    t{{i}} = u{{i}}-i{{i}}
    {{endfor}}


    {{for i in range(d)}}
    tp{{i}}_0 = t{{i}}*t{{i}}*t{{i}};  tp{{i}}_1 = t{{i}}*t{{i}};  tp{{i}}_2 = t{{i}};  tp{{i}}_3 = 1.0;
    {{endfor}}


    {{for i in range(d)}}
    Phi{{i}}_0 = 0
    Phi{{i}}_1 = 0
    Phi{{i}}_2 = 0
    Phi{{i}}_3 = 0
    if t{{i}} < 0:
        Phi{{i}}_0 = dAd[0,3]*t{{i}} + Ad[0,3]
        Phi{{i}}_1 = dAd[1,3]*t{{i}} + Ad[1,3]
        Phi{{i}}_2 = dAd[2,3]*t{{i}} + Ad[2,3]
        Phi{{i}}_3 = dAd[3,3]*t{{i}} + Ad[3,3]
    elif t{{i}} > 1:
        Phi{{i}}_0 = (3*Ad[0,0] + 2*Ad[0,1] + Ad[0,2])*(t{{i}}-1) + (Ad[0,0]+Ad[0,1]+Ad[0,2]+Ad[0,3])
        Phi{{i}}_1 = (3*Ad[1,0] + 2*Ad[1,1] + Ad[1,2])*(t{{i}}-1) + (Ad[1,0]+Ad[1,1]+Ad[1,2]+Ad[1,3])
        Phi{{i}}_2 = (3*Ad[2,0] + 2*Ad[2,1] + Ad[2,2])*(t{{i}}-1) + (Ad[2,0]+Ad[2,1]+Ad[2,2]+Ad[2,3])
        Phi{{i}}_3 = (3*Ad[3,0] + 2*Ad[3,1] + Ad[3,2])*(t{{i}}-1) + (Ad[3,0]+Ad[3,1]+Ad[3,2]+Ad[3,3])
    else:
        Phi{{i}}_0 = (Ad[0,0]*tp{{i}}_0 + Ad[0,1]*tp{{i}}_1 + Ad[0,2]*tp{{i}}_2 + Ad[0,3]*tp{{i}}_3)
        Phi{{i}}_1 = (Ad[1,0]*tp{{i}}_0 + Ad[1,1]*tp{{i}}_1 + Ad[1,2]*tp{{i}}_2 + Ad[1,3]*tp{{i}}_3)
        Phi{{i}}_2 = (Ad[2,0]*tp{{i}}_0 + Ad[2,1]*tp{{i}}_1 + Ad[2,2]*tp{{i}}_2 + Ad[2,3]*tp{{i}}_3)
        Phi{{i}}_3 = (Ad[3,0]*tp{{i}}_0 + Ad[3,1]*tp{{i}}_1 + Ad[3,2]*tp{{i}}_2 + Ad[3,3]*tp{{i}}_3)

    {{endfor}}

    for k in range(n_vals):
        vals[k] = {{values[d]}}


{{endfor}}


#{{for d in range(1,max_order+1)}}

#@cython.boundscheck(False)
#@cython.wraparound(False)
#cdef eval_UBspline_{{d}}_g( smin, smax, orders, coefs, double[:,::1] svec):


    #{{for i in range(d)}}
    #cdef double start{{i}} = smin[{{i}}]
    #cdef double dinv{{i}} = (orders[{{i}}]-1.0)/(smax[{{i}}]-smin[{{i}}])
    #{{endfor}}


    #cdef double val

    #cdef int N = svec.shape[1]

    #cdef int n

    #cdef double[:,::1] Ad = A44d
    #cdef double[:,::1] dAd = dA44d

    #cdef int {{    str.join(', ',['i{}'.format(i) for i in range(d)])   }}
    #cdef double {{    str.join(', ',['x{}'.format(i) for i in range(d)])   }}
    #cdef double {{    str.join(', ',['u{}'.format(i) for i in range(d)])   }}
    #cdef double {{    str.join(', ',['t{}'.format(i) for i in range(d)])   }}
    #cdef double {{    str.join(', ',['extrap{}'.format(i) for i in range(d)])   }}

    #cdef double {{    str.join(', ',['Phi{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}
    #cdef double {{    str.join(', ',['dPhi{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}
    #cdef double {{    str.join(', ',['tp{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}

    #cdef double[{{str.join(',',[':']*(d-1)+['::1'])}}] C = coefs

    #cdef double[:] vals = np.zeros(N)
    #cdef double[:,::1] dvals = np.zeros(({{d}},N))

    #cdef double tpx_0, tpx_1, tpx_2, tpx_3
    #cdef double tpy_0, tpy_1, tpy_2, tpy_3

    #with nogil, parallel():

        #for n in prange(N):

            #{{for i in range(d)}}
            #x{{i}} = svec[{{i}},n]
            #{{endfor}}


            #{{for i in range(d)}}
            #u{{i}} = (x{{i}} - start{{i}})*dinv{{i}}
            #i{{i}} = <int> u{{i}}
            #t{{i}} = u{{i}}-i{{i}}
            #{{endfor}}

            #{{for i in range(d)}}
            #extrap{{i}} = 0 if (t{{i}} < 0 or t{{i}} >= 1) else 1
            #{{endfor}}

            #{{for i in range(d)}}
            #tp{{i}}_0 = t{{i}}*t{{i}}*t{{i}}*extrap{{i}};  tp{{i}}_1 = t{{i}}*t{{i}};  tp{{i}}_2 = t{{i}};  tp{{i}}_3 = 1.0;
            #{{endfor}}


            #{{for i in range(d)}}
            #Phi{{i}}_0 = (Ad[0,0]*tp{{i}}_0 + Ad[0,1]*tp{{i}}_1 + Ad[0,2]*tp{{i}}_2 + Ad[0,3]*tp{{i}}_3)
            #Phi{{i}}_1 = (Ad[1,0]*tp{{i}}_0 + Ad[1,1]*tp{{i}}_1 + Ad[1,2]*tp{{i}}_2 + Ad[1,3]*tp{{i}}_3)
            #Phi{{i}}_2 = (Ad[2,0]*tp{{i}}_0 + Ad[2,1]*tp{{i}}_1 + Ad[2,2]*tp{{i}}_2 + Ad[2,3]*tp{{i}}_3)
            #Phi{{i}}_3 = (Ad[3,0]*tp{{i}}_0 + Ad[3,1]*tp{{i}}_1 + Ad[3,2]*tp{{i}}_2 + Ad[3,3]*tp{{i}}_3)
            #{{endfor}}

            #{{for i in range(d)}}
            #dPhi{{i}}_0 = (dAd[0,0]*tp{{i}}_0 + dAd[0,1]*tp{{i}}_1 + dAd[0,2]*tp{{i}}_2 + dAd[0,3]*tp{{i}}_3)*dinv{{i}}
            #dPhi{{i}}_1 = (dAd[1,0]*tp{{i}}_0 + dAd[1,1]*tp{{i}}_1 + dAd[1,2]*tp{{i}}_2 + dAd[1,3]*tp{{i}}_3)*dinv{{i}}
            #dPhi{{i}}_2 = (dAd[2,0]*tp{{i}}_0 + dAd[2,1]*tp{{i}}_1 + dAd[2,2]*tp{{i}}_2 + dAd[2,3]*tp{{i}}_3)*dinv{{i}}
            #dPhi{{i}}_3 = (dAd[3,0]*tp{{i}}_0 + dAd[3,1]*tp{{i}}_1 + dAd[3,2]*tp{{i}}_2 + dAd[3,3]*tp{{i}}_3)*dinv{{i}}
            #{{endfor}}


            #vals[n] = {{values[d]}}

            #{{for i in range(d)}}
            #dvals[{{i}},n] = {{dvalues[d][i]}}
            #{{endfor}}

    #return [vals,dvals]

#{{endfor}}
